# Скрин просмотра определенного инстанса процесса. Список переменных.

# В списке пользователю показываем:
#
# name (Имя) - имя переменной
# type (Тип) - тип переменной
#
# value (Значение) - строкове представление переменной + кликабельно.
# Рядом с значением покащываем всплывающую кнопку для копирования значения в буфер обмена.
# По клику на ссылку открывается модальное окно с просмотром содержимого переменной и возможностью
# отредактировать (textarea, желательно с code style).
# Редактирование и создание возможно только для типов: string, date, integer, boolean, double, long, null, object.
# Для всех остальных только просмотр.
# Цель модального окна - возможноность просмотра переменных с большим содержимом в удобном виде и редактирование.
# |
# На форме показываем:
# name (Имя), (текст, нередактируемое)
# type (Тип), (редактируемое). Список из - string, date, integer, boolean, double, long, null, object
#
# Далее блок значений, он разный в зависимости от типа:
#
# Если тип "object" то блок значения содержит поля:
# typedValueInfo.objectTypeName (Тип объекта), (текст, редактируемое)
# typedValueInfo.serializationDataFormat (Формат сериализации), (текст, нередактируемое)
# typedValueInfo.errorMsg (Ошибка десериализации) - Если поле пришло пустое, то не показываем его. (textarea, нередактируемое)
# две вкладки: "Сериализованное значение" и "Десериализованное значение", соответственно показываем
# значения в порядке:
# serializableValue.deserialized (Десериализованное значение) (редактируемое)
# serializableValue.serialized (Сериализованное значение) (нередактируемое)
# При сохранении см. запрос ProcessVariableUpdateObject
#
# Для всех остальных типов блок значения содержит поля:
# value (Значение), (редактируемое)
# Тут есть интересный момент, что котнрол ввода значения должен меняться при смене типа переменной.
# При сохранении см. запрос ProcessVariableUpdateSimpleType
#
# Могут придти еще типы - json, xml, bytes, file, short. Их только показываем, редактировать нельзя.
#
#
# scope (Область видимости) - Кликабельная ссылка
# По клику добавляем в фильтр сортировки текущего списка переменных, поле scope (ProcessInstanceViewProcessVariablesFilter)
# и, если scope.activityId не пустой, то выделяем этот элемент на схеме БП.
# Смысл в том, что если пользователь кликнул на ссылку, то он хочет увидеть все переменные,
# которые есть в рамках этой области видимости. Должна быть возможность сбросить фильтр.
#
# Пагинация поддерживается.
# Сортировка по умолчанию идет по имени переменной.
# В список добавить возможность сортировки name - asc / desc
#
# Действия:
# Каждую переменную можно удалить. При удалении см. запрос ProcessVariableDelete
#
# Добавить окно поиска с фильтрацией по `name`, `scope`. Пример см ProcessInstanceViewProcessVariablesFilter

# @name ProcessInstanceViewProcessVariables
POST http://localhost/gateway/api/records/query
Authorization: Basic admin admin
Content-Type: application/json

{
    "query": {
        "sourceId": "eproc/bpmn-variable-instance",
        "query": {
            "att": "processInstance",
            "t": "eq",
            "val": "eproc/bpmn-proc@bb4d473c-675c-11ee-96b1-fa02e06f9ec1"
        },
        "page": {
            "maxItems": 30,
            "skipCount": 0
        }
    },
    "attributes": {
        "name": "name",
        "type": "type",
        "value": "value",
        "typedValueInfo": "typedValueInfo?json",
        "serializableValue": "serializableValue?json",
        "scope": "scope{?disp,activityId}"
    }
}

